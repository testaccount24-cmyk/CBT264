UKEYCSA  TITLE 'Whether or not to allow allocation of CSA in User Key'
*  -----------------------------------------------------------------  *
*                                                                     *
*    Function:   To turn the global setting of whether a program      *
*                can allocate Key 8 storage in common storage.        *
*                This is determined by a PARMLIB setting in the       *
*                DIAGxx member:  VSM ALLOWUSERKEYCSA(YES)   or        *
*                                VSM ALLOWUSERKEYCSA(NO) .            *
*                                                                     *
*                If you want to switch this setting temporarily,      *
*                then issue this APF-authorized TSO command:          *
*                                                                     *
*                Bit settings are found in the DGNBOPTIONS1 byte      *
*                of the DGNB control block mapped by the IGVDGNB      *
*                macro in SYS1.MODGEN.                                *
*                                                                     *
*          UKEYCSA N   -  to not allow Common Storage allocations     *
*                         in Key 8 or a user key - X'80'              *
*                                                                     *
*          UKEYCSA Y   -  to allow Common Storage allocations         *
*                         in Key 8 or a user key - X'40' (or X'00')   *
*                                                                     *
*          UKEYCSA (anything else) - to display the current setting   *
*                                    of the DGNBOPTIONS1 byte         *
*                                                                     *
*          Note.  This functionality is going away with z/OS 2.4.     *
*                 The bit that this program sets, will not work       *
*                 anymore after that time.  So the effective life     *
*                 of this program is from z/OS 1.8 thru z/OS 2.3.     *
*                 (Feb 2019 - announced by IBM)                       *
*                                                                     *
*    Date:       June 2, 2008                                         *
*                                                                     *
*    Technical Detail:  PUTLINE interface for TSO Output.             *
*                                                                     *
*    Release Dependencies:  Needs z/OS 1.8 or above.                  *
*                                                                     *
*            Only effective for z/OS 1.8 and higher.  At the          *
*            z/OS 1.7 level, the DGNB control block exists            *
*            at Level 03, but changing the DGNBOPTIONS1 bit           *
*            is not effective, and does not do anything.              *
*            Same for the z/OS 1.6 level.  At the z/OS 1.5            *
*            level, the DGNB control block is at Level 02,            *
*            and the entire control block does not even have          *
*            any space for the DGBNOPTIONS1 field.  At or             *
*            below the z/OS 1.4 level, the IGVDGNB control            *
*            block is at Level 01.  The DGNB control block            *
*            was created at the OS/390 2.6 level, and did not         *
*            exist before that.                                       *
*                                                                     *
*    Changes:                                                         *
*                                                                     *
*            This program will be useless from z/OS 2.4 onward.       *
*                                                                     *
*                                                                     *
*  -----------------------------------------------------------------  *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    STM   15,1,HEXSAVE
         LA    1,&FROM
         LA    0,&LEN
         LA    15,&TO
         BAL   4,HEX
         LM    15,1,HEXSAVE
         MEND
*  -----------------------------------------------------------------  *
         MACRO
&NAME    REGS
         LCLA  &I
&I       SETA  0
.LUP     ANOP
R&I      EQU   &I
&I       SETA  &I+1
         AIF   (&I LE 15).LUP
         MEND
*  -----------------------------------------------------------------  *
*  --           Create PUTLINE environment.                       --  *
*  -----------------------------------------------------------------  *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
* --       End of Internal Macros......                            -- *
* ------------------------------------------------------------------- *
         SPACE 3
UKEYCSA  CSECT
UKEYCSA  AMODE 31
UKEYCSA  RMODE ANY
         REGS
         USING UKEYCSA,R15         (ESTABLISH TEMPORARY BASE).
         B     BEGIN               SKIP OVER HEADER.
EYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.
EYEC     DC    C' UKEYCSA - &SYSDATE - &SYSTIME -'
         DC    C'     --------------------------------    '
         DC    C'             '
         DC    C'                   '
EYECL    EQU   *-EYEC
         DROP  R15                 (DROP TEMPORARY BASE).
BEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY BASE.
         USING UKEYCSA,R12         (TELL ASSEMBLER).
         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R13,8(,R14)         CHAIN ...
         ST    R14,SAVE+4          ... SAVE AREAS.
         SPACE 1
         LTR   R1,R1               ANY CPPL OR PARM POINTER?
         BZ    RETURN              B IF NOT.
         L     R2,0(,R1)           POINT TO BUFFER
         LTR   R2,R2               ANY?
         BZ    RETURN              B IF NOT.
         LH    R3,0(R2)            LOAD LENGTH.
         LTR   R3,R3               ANY?
         BZ    RETURN              B IF NOT.
         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?
         BE    RLDCP
         LA    R2,2(,R2)           POINT TO PARM.
         B     PARM
RLDCP    CH    R3,=H'4'            ANY PARM?
         BE    NEITHER             B IF NOT.
         AH    R2,2(,R2)           POINT TO ...
         LA    R2,4(,R2)           ... PARM.
PARM     OI    0(R2),C' '          UPPERCASE.
*
* --- Parms gotten at this point.                            -------- *
* --- Are we allowing Key 8 allocation of CSA, YES or NO ?   -------- *
*
SETFLAGS DS    0H
         MVI   FLAG1,X'00'
UNALLOW  CLI   0(R2),C'N'          N. We don't want to allow?
         BNE   ALLOW               No. Try if Y.
         OI    FLAG1,FLAGCSNO      Set up for not allowing.
         B     FINDDATA            Go get DGNBOPTIONS1 bit.
ALLOW    CLI   0(R2),C'Y'          Y. We want to allow?
         BNE   NEITHER             No. Must be No Change.
         OI    FLAG1,FLAGCSYS      Set up for allowing.
         B     FINDDATA            Go get DGNBOPTIONS1 bit.
NEITHER  DS    0H                  No change.
         MVI   FLAG1,X'00'         Nullify change flags.
*
* - Parm chosen. Get the DGNB control block and the switching bits. - *
*
FINDDATA L     R5,X'10'            POINT TO THE CVT.
         L     R5,X'8C'(,R5)       POINT TO THE ECVT.
         L     R5,X'14C'(,R5)      POINT TO THE DGNB.
         USING DGNB,R5             (TELL ASSEMBLER).
         CLC   =C'DGNB',0(R5)      Are we really there?
         BNE   RELERR              No. Report a problem.
         CLC   =C'03',4(R5)        Proper level of IGVDGNB?
         BH    RELERR              Too low. Report the problem.
* -- >     Further tests for release dependency - below
         L     R6,16               Get CVT
         USING CVT,R6
         TM    CVTDCB,CVTOSEXT     Does CVTOSLVL exist?
         BZ    RELERR              No. Wrong release.
         TM    CVTOSLV5,CVTH7730   Are we at least at z/OS 1.8 ?
         BZ    RELERR              No. Wrong release.
         DROP  R6
* -- >     Further tests for release dependency - above
DISPFLAG DS    0H
         MVC   STORFLAG(1),DGNBOPTIONS1  Save entire byte for reporting
         CLI   FLAG1,X'00'               Did we have a valid parm?
         BE    MESSAGES                  No. Just report no change.
ON       DS    0H                  This section is for the Key 0 stuff.
* -- >       Test if this command is being run APF Authorized
         STM   R15,R1,SAVE14T1     Now save registers and test if APF
         XR    R15,R15                  authorized.
         TESTAUTH FCTN=1           Are we authorized?
         LTR   R15,R15             Test the return code.
         BNZ   NOTAUTH             Not zero, tell not authorized.
         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.
* -- >                             We're authorized. Go Key 0.
         MODESET KEY=ZERO
         TM    FLAG1,FLAGCSNO      Flag setting to NOT allow?
         BNO   ALLOWX              No. Try and see if we want to allow.
UNALLOWX OI    DGNBOPTIONS1,X'80'           Set bit to NOT allow.
         NI    DGNBOPTIONS1,X'FF'-X'40'     Turn off bit to allow.
         B     ENDMOD                       Save bit settings.
ALLOWX   TM    FLAG1,FLAGCSYS      Flag setting to ALLOW?
         BNO   ENDMOD              No. No changes will be made.
         OI    DGNBOPTIONS1,X'40'           Turn on bit to allow.
         NI    DGNBOPTIONS1,X'FF'-X'80'     Turn off bit to NOT allow.
         B     ENDMOD                       Save bit settings.
ENDMOD   DS    0H                           Leave Key 0
         MVC   STORFLAG(1),DGNBOPTIONS1   Save bit settings for report.
         MODESET KEY=NZERO
         DROP  R5
MESSAGES DS    0H                         Program Title
         APUT  'Allow Userkey CSA Allocations - No or Yes ',42
         APUT  '----- ------- --- ----------- - -- -- --- ',42
         APUT  '                                          ',42
** ---------------------------------------------------------------- **
MESSAGOF DS    0H                         Report Key 8 CSA NOT allowed.
         TM    FLAG1,FLAGCSNO             Test if making NOT allowed.
         BNO   MESSAGON                   No. Try allowed.
         STM   R14,R1,SAVE14T1            Save registers for APUT.
         MVC   OUTPUT,OUTPUT-1            Show state of DGNB byte.
         MVC   OUTPUT(18),=C'DGNBOPTIONS1 Flag '
         HEX   OUTPUT+20,1,STORFLAG
         TM    STORFLAG,X'80'
         BO    MESS01NO
         MVC   OUTPUT+24(3),=C'YES'
         B     MESS01YS
MESS01NO MVC   OUTPUT+24(3),=C'NO '
MESS01YS DS    0H                         Write actual message.
         APUT  OUTPUT,27
         MVC   OUTPUT,OUTPUT-1
         MVC   OUTPUT(MSGOFLEN),MSGOF
         APUT  OUTPUT,MSGOFLEN
         APUT  '                                          ',42
         LM    R14,R1,SAVE14T1            Restore registers, and
         B     RETURN                       Get out....
** ---------------------------------------------------------------- **
MESSAGON DS    0H                         Report Key 8 CSA is allowed.
         TM    FLAG1,FLAGCSYS             Test if making YES allowed.
         BNO   MESSAGNC                   No. Then we're not changing.
         STM   R14,R1,SAVE14T1            Save registers for APUT.
         MVC   OUTPUT,OUTPUT-1            Show state of DGNB byte.
         MVC   OUTPUT(18),=C'DGNBOPTIONS1 Flag '
         HEX   OUTPUT+20,1,STORFLAG
         TM    STORFLAG,X'80'
         BO    MESS02NO
         MVC   OUTPUT+24(3),=C'YES'
         B     MESS02YS
MESS02NO MVC   OUTPUT+24(3),=C'NO '
MESS02YS DS    0H                         Write actual message.
         APUT  OUTPUT,27
         MVC   OUTPUT,OUTPUT-1
         MVC   OUTPUT(MSGONLEN),MSGON
         APUT  OUTPUT,MSGONLEN
         APUT  '                                          ',42
         LM    R14,R1,SAVE14T1            Restore registers, and
         B     RETURN                       Get out....
** ---------------------------------------------------------------- **
MESSAGNC DS    0H                         Report NO CHANGE.
         STM   R14,R1,SAVE14T1            Save registers for APUT.
         MVC   OUTPUT,OUTPUT-1            Show state of DGNB byte.
         MVC   OUTPUT(18),=C'DGNBOPTIONS1 Flag '
         HEX   OUTPUT+20,1,STORFLAG
         TM    STORFLAG,X'80'
         BO    MESS03NO
         MVC   OUTPUT+24(3),=C'YES'
         B     MESS03YS
MESS03NO MVC   OUTPUT+24(3),=C'NO '
MESS03YS DS    0H                         Write actual message.
         APUT  OUTPUT,27
         MVC   OUTPUT,OUTPUT-1
         MVC   OUTPUT(MSGNCLEN),MSGNC
         APUT  OUTPUT,MSGNCLEN
         APUT  '                                          ',42
         LM    R14,R1,SAVE14T1            Restore registers, and
         B     RETURN                       Get out....
** ---------------------------------------------------------------- **
RETURN   L     R13,SAVE+4             E
         LM    R14,R12,12(R13)          X
         SR    R15,R15                    I
         BR    R14                          T
** ---------------------------------------------------------------- **
NOTAUTH  DS    0H                  Command not APF authorized message.
         APUT  MESSAG2C,L'MESSAG2C
         B     RETURN
** ---------------------------------------------------------------- **
RELERR   DS    0H                  Command not APF authorized message.
         APUT  MESSAG1C,L'MESSAG1C
         B     RETURN
** ---------------------------------------------------------------- **
** --         C  O  N  S  T  A  N  T  S                          -- **
** ---------------------------------------------------------------- **
MESSAG1C DC    C'UKEYCSA is only supported for z/OS 1.8 and higher.'
MESSAG2C DC    C'Command was not invoked APF authorized.'
FLAG1    DC    X'00'
FLAGCSNO EQU   B'10000000'            DGNBALLOWUSERKEYCSANO
FLAGCSYS EQU   B'01000000'            DGNBALLOWUSERKEYSPEC
STORFLAG DC    X'00'
HEXSAVE  DS    3F                  SAVE FOR HEX MACRO
         DS    0D
MSGOF    DC    C'ALLOWUSERKEYCSA has been set to NO  '
MSGOFLEN EQU   *-MSGOF
         DS    0D
MSGON    DC    C'ALLOWUSERKEYCSA has been set to YES '
MSGONLEN EQU   *-MSGON
         DS    0D
MSGNC    DC    C'ALLOWUSERKEYCSA has not been changed'
MSGNCLEN EQU   *-MSGNC
SAVE     DS    9D                  Program Save Area
SAVE14T1 DS    2D                  Save "system-used" registers.
         DC    C' '                Blank before OUTPUT line.
OUTPUT   DC    CL80'  '            Variable output line.
         LTORG
** ---------------------------------------------------------------- **
HEX      DS    0H
         MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R4                  RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
         SPACE
         TITLE '- MAPPING MACROS.'
         CVT   DSECT=YES           Map the CVT.
         IGVDGNB                   Map the DGNB control block.
         END   UKEYCSA
** ---------------------------------------------------------------- **
*  -----------------------------------------------------------------  *
*  --           Create PUTLINE environment.                       --  *
*  -----------------------------------------------------------------  *
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END EPUTL
